name: Build, Test and Deploy to Prod

on:
  push:
    branches:
      - master

env:
  SQLX_OFFLINE: true
  DATABASE_URL: ${{secrets.DATABASE_TEST_URI}}

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.3-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres

      - name: Run SQLx Database Migrations
        run: sqlx migrate run

      - name: Generate SQLX Prepared Queries
        run: cargo sqlx prepare

      - name: Build and test code
        run: |
          cargo build --verbose
          cargo test --verbose

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Create .env file
        run: |
          echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env
          echo PGADMIN_LISTEN_PORT=${{ secrets.PGADMIN_LISTEN_PORT }} >> .env
          echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo DATABASE_CONTAINER_URL=${{secrets.DATABASE_CONTAINER_URL}} >> .env
          echo CLIENT_ORIGIN=${{secrets.CLIENT_ORIGIN}} >> .env
          echo ACCESS_TOKEN_PRIVATE_KEY=${{secrets.ACCESS_TOKEN_PRIVATE_KEY}} >> .env
          echo REFRESH_TOKEN_PRIVATE_KEY=${{secrets.REFRESH
          echo ACCESS_TOKEN_PUBLIC_KEY=${{secrets.ACCESS_TOKEN_PUBLIC_KEY}} >> .env
          echo REFRESH_TOKEN_PUBLIC_KEY=${{secrets.REFRESH_TOKEN_PUBLIC_KEY}} >> .env
          echo ACCESS_TOKEN_EXPIRED_IN=${{secrets.ACCESS_TOKEN_EXPIRED_IN}} >> .env
          echo REFRESH_TOKEN_EXPIRED_IN=${{secrets.REFRESH_TOKEN_EXPIRED_IN}} >> .env
          echo ACCESS_TOKEN_MAXAGE=${{secrets.ACCESS_TOKEN_MAXAGE}} >> .env
          echo REFRESH_TOKEN_MAXAGE=${{secrets.REFRESH_TOKEN_MAXAGE}} >> .env
          echo Google_OAuth_Client_ID=${{secrets.Google_OAuth_Client_ID}} >> .env
          echo Google_OAuth_Client_Secret=${{secrets.Google_OAuth_Client_Secret}} >> .env
          echo GOOGLE_OAUTH_REDIRECT_URL=${{secrets.GOOGLE_OAUTH_REDIRECT_URL}} >> .env          

      - name: Build and push Docker images
        uses: docker/bake-action@v4.2.0
        with:
          push: true
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: debian:bookworm-slim

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install sshpass
        run: sudo apt-get install sshpass

      - name: Copy Caddyfile to vps_server
        run: sshpass -v -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no Caddyfile root@${{ secrets.VPS_IP }}:~

      - name: Copy docker-compose.yml to vps_server
        run: sshpass -v -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no docker-compose.yml root@${{ secrets.VPS_IP }}:~

      - name: Copy docker-compose.prod.yml to vps_server
        run: sshpass -v -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no docker-compose.prod.yml root@${{ secrets.VPS_IP }}:~

      - name: Create .env file
        run: |
          echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env
          echo PGADMIN_LISTEN_PORT=${{ secrets.PGADMIN_LISTEN_PORT }} >> .env
          echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo DATABASE_CONTAINER_URL=${{secrets.DATABASE_CONTAINER_URL}} >> .env
          echo CLIENT_ORIGIN=${{secrets.CLIENT_ORIGIN}} >> .env
          echo ACCESS_TOKEN_PRIVATE_KEY=${{secrets.ACCESS_TOKEN_PRIVATE_KEY}} >> .env
          echo REFRESH_TOKEN_PRIVATE_KEY=${{secrets.REFRESH
          echo ACCESS_TOKEN_PUBLIC_KEY=${{secrets.ACCESS_TOKEN_PUBLIC_KEY}} >> .env
          echo REFRESH_TOKEN_PUBLIC_KEY=${{secrets.REFRESH_TOKEN_PUBLIC_KEY}} >> .env
          echo ACCESS_TOKEN_EXPIRED_IN=${{secrets.ACCESS_TOKEN_EXPIRED_IN}} >> .env
          echo REFRESH_TOKEN_EXPIRED_IN=${{secrets.REFRESH_TOKEN_EXPIRED_IN}} >> .env
          echo ACCESS_TOKEN_MAXAGE=${{secrets.ACCESS_TOKEN_MAXAGE}} >> .env
          echo REFRESH_TOKEN_MAXAGE=${{secrets.REFRESH_TOKEN_MAXAGE}} >> .env
          echo Google_OAuth_Client_ID=${{secrets.Google_OAuth_Client_ID}} >> .env
          echo Google_OAuth_Client_Secret=${{secrets.Google_OAuth_Client_Secret}} >> .env
          echo GOOGLE_OAUTH_REDIRECT_URL=${{secrets.GOOGLE_OAUTH_REDIRECT_URL}} >> .env          
      
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd ~
            
            docker-compose down
            docker-compose pull
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

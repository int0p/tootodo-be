name: Build, Test and Deploy to Prod

on:
  push:
    branches:
    - master

env:
  SQLX_OFFLINE: true
  DATABASE_URL: ${{secrets.DATABASE_CONTAINER_URL}}
  CLIENT_ORIGIN: ${{ secrets.CLIENT_ORIGIN }}
  DOMAIN: ${{ secrets.DOMAIN }}
  ACCESS_TOKEN_PRIVATE_KEY: ${{ secrets.ACCESS_TOKEN_PRIVATE_KEY }}
  ACCESS_TOKEN_EXPIRED_IN: ${{ secrets.ACCESS_TOKEN_EXPIRED_IN }}
  REFRESH_TOKEN_EXPIRED_IN: ${{ secrets.REFRESH_TOKEN_EXPIRED_IN }}
  REFRESH_TOKEN_MAXAGE: ${{ secrets.REFRESH_TOKEN_MAXAGE }}
  DATABASE_CONTAINER_URL: ${{ secrets.DATABASE_CONTAINER_URL }}
  ACCESS_TOKEN_MAXAGE: ${{ secrets.ACCESS_TOKEN_MAXAGE }}
  REFRESH_TOKEN_PUBLIC_KEY: ${{ secrets.REFRESH_TOKEN_PUBLIC_KEY }}
  ACCESS_TOKEN_PUBLIC_KEY: ${{ secrets.ACCESS_TOKEN_PUBLIC_KEY }}
  REFRESH_TOKEN_PRIVATE_KEY: ${{ secrets.REFRESH_TOKEN_PRIVATE_KEY }}
  GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
  GOOGLE_OAUTH_REDIRECT_URL: ${{ secrets.GOOGLE_OAUTH_REDIRECT_URL }}
  GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  PGADMIN_DEFAULT_EMAIL: ${{ secrets.PGADMIN_DEFAULT_EMAIL }}
  PGADMIN_DEFAULT_PASSWORD: ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
  PGADMIN_LISTEN_PORT: ${{ secrets.PGADMIN_LISTEN_PORT }}
  MONGO_INITDB_ROOT_USERNAME: ${{secrets.MONGO_INITDB_ROOT_USERNAME}}
  MONGO_INITDB_ROOT_PASSWORD: ${{secrets.MONGO_INITDB_ROOT_PASSWORD}}
  MONGO_INITDB_DATABASE: ${{secrets.MONGO_INITDB_DATABASE}}
  MONGO_TEST_DATABASE: ${{secrets.MONGO_TEST_DATABASE}}
  MONGODB_URL: ${{secrets.MONGODB_URL}}
  MONGODB_TEST_URL: ${{secrets.MONGODB_TEST_URL}}
  MONGODB_CONTAINER_URL: ${{secrets.MONGODB_CONTAINER_URL}}

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SQLX_OFFLINE: true
      DATABASE_URL: ${{secrets.DATABASE_TEST_URI}}
      MONGODB_URL: ${{secrets.MONGODB_URL}}

    services:
      postgres:
        image: postgres:15.6-alpine3.19
        ports:
        - 5432:5432
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        options: "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5 "
      mongodb:
        image: mongo
        ports:
        - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{secrets.MONGO_INITDB_ROOT_USERNAME}}
          MONGO_INITDB_ROOT_PASSWORD: ${{secrets.MONGO_INITDB_ROOT_PASSWORD}}
          MONGO_INITDB_DATABASE: ${{secrets.MONGO_INITDB_DATABASE}}
          MONGODB_URL: ${{secrets.MONGODB_URL}}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features native-tls,postgres

    - name: Run SQLx Database Migrations
      run: sqlx migrate run

    - name: Generate SQLX Prepared Queries
      run: cargo sqlx prepare

    - name: Build and test code
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_PASSWORD}}

    - name: Build and push Docker images
      uses: docker/bake-action@v4.2.0
      with:
        push: true
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Copy Files to VPS
      run: |
        scp -o StrictHostKeyChecking=no Caddyfile seungye@${{ secrets.VPS_IP }}:~
        scp -o StrictHostKeyChecking=no docker-compose.yml seungye@${{ secrets.VPS_IP }}:~
        scp -o StrictHostKeyChecking=no docker-compose.prod.yml seungye@${{ secrets.VPS_IP }}:~

    - name: Deploy to VPS
      run: "ssh -o StrictHostKeyChecking=no seungye@${{ secrets.VPS_IP }} \"\n  export DATABASE_URL=${{ secrets.DATABASE_CONTAINER_URL }}\n  export DOMAIN=${{ secrets.DOMAIN }}\n  export DATABASE_CONTAINER_URL=${{ secrets.DATABASE_CONTAINER_URL }}\n  export POSTGRES_USER=${{ secrets.POSTGRES_USER }}\n  export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}\n  export POSTGRES_DB=${{ secrets.POSTGRES_DB }}\n  export PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}\n  export PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}\n  export PGADMIN_LISTEN_PORT=${{ secrets.PGADMIN_LISTEN_PORT }}\n  export CLIENT_ORIGIN=${{ secrets.CLIENT_ORIGIN }}\n  export ACCESS_TOKEN_PRIVATE_KEY=${{ secrets.ACCESS_TOKEN_PRIVATE_KEY }}\n  export REFRESH_TOKEN_PRIVATE_KEY=${{ secrets.REFRESH_TOKEN_PRIVATE_KEY }}\n  export ACCESS_TOKEN_PUBLIC_KEY=${{ secrets.ACCESS_TOKEN_PUBLIC_KEY }}\n  export REFRESH_TOKEN_PUBLIC_KEY=${{ secrets.REFRESH_TOKEN_PUBLIC_KEY }}\n  export ACCESS_TOKEN_EXPIRED_IN=${{ secrets.ACCESS_TOKEN_EXPIRED_IN }}\n  export REFRESH_TOKEN_EXPIRED_IN=${{ secrets.REFRESH_TOKEN_EXPIRED_IN }}\n  export ACCESS_TOKEN_MAXAGE=${{ secrets.ACCESS_TOKEN_MAXAGE }}\n  export REFRESH_TOKEN_MAXAGE=${{ secrets.REFRESH_TOKEN_MAXAGE }}\n  export GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}\n  export GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}\n  export GOOGLE_OAUTH_REDIRECT_URL=${{ secrets.GOOGLE_OAUTH_REDIRECT_URL }}\n  export MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}\n  export MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}\n  export MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}\n  export MONGO_TEST_DATABASE=${{ secrets.MONGO_TEST_DATABASE }}\n  export MONGODB_URL=${{ secrets.MONGODB_URL }}\n  export MONGODB_TEST_URL=${{ secrets.MONGODB_TEST_URL }}\n  export MONGODB_CONTAINER_URL=${{ secrets.MONGODB_CONTAINER_URL }}\n  docker-compose down \n  docker-compose pull \n  docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d\n"
